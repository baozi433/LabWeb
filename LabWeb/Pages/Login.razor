@page "/login"
@inject IUserAccountRepository userAccountRepository
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<PageTitle>Login</PageTitle>

<div class="row">
    <div class="col-lg-4 offset-lg-4 p-4 border">
        <div class="mb-3 text-center">
            <h3>Admin</h3>
        </div>
        <div class="mb-3">
            <label for="username">User Name</label>
            <InputText @bind-Value="@userAccount.UserName" id="username" class="form-control" />
        </div>
        <div class="mb-3">
            <label for="password">Password</label>
            <InputText type="password" @bind-Value="@userAccount.Password" id="password" class="form-control" />
        </div>
        <div class="mb-3">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
    </div>
</div>

@code {
    private UserAccount userAccount = new();

    private async Task Authenticate()
    {
        var user = await userAccountRepository.GetUserByName(userAccount.UserName);
        if(user == null || user.Password != userAccount.Password)
        {
            await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = user.UserName,
                Role = user.Role
            });
        navManager.NavigateTo("/", true);
    }

    
    


}
