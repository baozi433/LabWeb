@page "/people"

<PageTitle>People at HIT Lab NZ</PageTitle>

<h3 class="text-center">Staff</h3>
<hr/>

@if (SearchPeople == null)
{
    <h3>Loading data...</h3>
}
else
{
    var peopleCount = SearchPeople.Count();

    <SearchBarComponent OnSearch="HandleSearch"></SearchBarComponent>

    if(peopleCount > 0)
    {
        <div class="row">
            <DisplayPeopleComponent people="SearchPeople"></DisplayPeopleComponent>
        </div>
        <hr class="mb-3" />
    }
}


@code {

    [Inject]
    public IPeopleRepository PeopleRepository { get; set; }

    public IEnumerable<PersonModel> SearchPeople { get; set; }

    public string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        SearchPeople = await PeopleRepository.SearchPeople(searchTerm);
    }

    private async void HandleSearch(string filter)
    {
        searchTerm = filter;
        SearchPeople = await PeopleRepository.SearchPeople(searchTerm);
        await InvokeAsync(() => { StateHasChanged(); });
    }

    protected IOrderedEnumerable<IGrouping<int, PersonModel>> GetGroupedPeopleByCategory()
    {
        return from person in SearchPeople
               group person by person.CategoryId into peopleByCatGroup
               orderby peopleByCatGroup.Key
               select peopleByCatGroup;
    }

    //protected string GetCategoryName(IGrouping<int, PersonModel> groupedPeople)
    //{
    //    return groupedPeople.FirstOrDefault(pg => pg.CategoryId == groupedPeople.Key).cate
    //}

}
