@page "/people"

<PageTitle>People at HIT Lab NZ</PageTitle>

@if (SearchPeople == null)
{
    <h3>Loading data...</h3>
}
else
{
    var peopleCount = SearchPeople.Count();

    <SearchBarComponent OnSearch="HandleSearch"></SearchBarComponent>

    if(peopleCount > 0)
    {

        @foreach(var peopleGroup in GetGroupedPeopleByCategory())
        {
            <h2 class="text-danger text-center m-5">@GetCategoryName(peopleGroup)</h2>
            <hr />

            <div class="row">
                <DisplayPeopleComponent people="@peopleGroup"></DisplayPeopleComponent>
            </div>
        }
    }
}

@code {
    [Inject]
    public IPeopleServiceServer PeopleService { get; set; }

    public List<PersonModelDto> SearchPeople { get; set; }

    public string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        SearchPeople = await PeopleService.SearchPeopleDtos(searchTerm);
    }

    private async void HandleSearch(string filter)
    {
        searchTerm = filter;
        SearchPeople = await PeopleService.SearchPeopleDtos(searchTerm);
        await InvokeAsync(() => { StateHasChanged(); });
    }

    protected IOrderedEnumerable<IGrouping<int, PersonModelDto>> GetGroupedPeopleByCategory()
    {
        return from person in SearchPeople
               group person by person.CategoryId into peopleByCatGroup
               orderby peopleByCatGroup.Key
               select peopleByCatGroup;
    }

    protected string GetCategoryName(IGrouping<int, PersonModelDto> groupedPeopleDtos)
    {
        return groupedPeopleDtos.FirstOrDefault(gp => gp.CategoryId == groupedPeopleDtos.Key).CategoryName;
    }

}
