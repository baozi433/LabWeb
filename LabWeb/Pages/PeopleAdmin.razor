@page "/admin/people"
@inject NavigationManager Navigation

<PageTitle>Admin - People</PageTitle>

<h3 class="text-center">staff</h3>
<button class="btn btn-primary float-end m-3" type="button" @onclick="HandleAdd"><oi class="oi oi-plus small"></oi></button>

<table class="table table-hover">
    <thead>
        <tr>
            <th>Name</th>
            <th>Title</th>
            <th>Research Area</th>
            <th>Email</th>
            <th>Operation</th>
        </tr>
    </thead>
    <tbody>
        @if(People != null && People.Count() > 0)
        {
            foreach(PersonModel person in People)
            {
                <PersonItemComponent person="person" OnDelete="()=>HandleDelete(person)" OnDetail="()=>HandleDetail(person)" OnEdit="()=>HandleEdit(person)"></PersonItemComponent>
            }
        }
        else
        {
            <tr>
                <td colspan="4">Cannot find people!</td>
            </tr>
        }
    </tbody>
</table>

@code {
    [Inject]
    public IPeopleRepository PeopleRepository { get; set; }
    public IEnumerable<PersonModel> People { get; set; }

    protected override async Task OnInitializedAsync()
    {
        People = await PeopleRepository.GetPeople();
    }

    public async void HandleDelete(PersonModel person)
    {
        await PeopleRepository.DeletePerson(person.Id);
        //People = null;
        People = await PeopleRepository.GetPeople();
        await InvokeAsync(() => { StateHasChanged(); });
    }

    public void HandleAdd()
    {
        Navigation.NavigateTo("/admin/people/add/");
    }

    public void HandleEdit(PersonModel person)
    {
        Navigation.NavigateTo($"/admin/people/edit/{person.Id}");
    }

    public void HandleDetail(PersonModel person)
    {
        Navigation.NavigateTo($"/persondetails/{person.Id}");
    }
}
